/* eslint-disable @typescript-eslint/no-explicit-any */
import { readConfObject } from '../configuration'
import { isElectron } from '../util'

interface AnalyticsObj {
  [key: string]: any
}

interface Track {
  [key: string]: any
}

export async function writeAWSAnalytics(
  rootModel: any,
  initialTimeStamp: number,
  sessionQuery?: string | null,
) {
  try {
    const url = 'https://analytics.jbrowse.org/api/v1'

    const multiAssemblyTracks = rootModel.jbrowse.tracks.filter(
      (track: any) => (readConfObject(track, 'assemblyNames') || []).length > 1,
    ).length

    const savedSessionCount = Object.keys(localStorage).filter(name =>
      name.includes('localSaved-'),
    ).length

    const { jbrowse: config, session, version: ver } = rootModel
    const { tracks, assemblies, plugins } = config

    // stats to be recorded in db
    const stats: AnalyticsObj = {
      ver,
      'plugins-count': plugins?.length || 0,
      'plugin-names': plugins?.map((p: any) => p.name).join(','),
      'assemblies-count': assemblies.length,
      'tracks-count': tracks.length,
      'session-tracks-count': session?.sessionTracks.length || 0,
      'open-views': session?.views.length || 0,
      'synteny-tracks-count': multiAssemblyTracks,
      'saved-sessions-count': savedSessionCount,

      // field if existing session param in query before autogenerated param
      'existing-session-param-type': sessionQuery?.split('-')[0] || 'none',

      // screen geometry
      'scn-h': window.screen.height,
      'scn-w': window.screen.width,

      // window geometry
      'win-h': window.innerHeight,
      'win-w': window.innerWidth,

      electron: isElectron,
      loadTime: (Date.now() - initialTimeStamp) / 1000,
      jb2: true,
    }

    // stringifies the track type counts, gets processed in lambda
    tracks.forEach((track: Track) => {
      const key = `track-types-${track.type}`
      stats[key] = stats[key] + 1 || 1
    })

    // stringifies the session track type counts, gets processed in lambda
    session?.sessionTracks.forEach((track: Track) => {
      const key = `sessionTrack-types-${track.type}`
      stats[key] = stats[key] + 1 || 1
    })

    // put stats into a query string for get request
    const qs = Object.keys(stats)
      .map(key => `${key}=${stats[key]}`)
      .join('&')

    await fetch(`${url}?${qs}`)
  } catch (e) {
    console.error('Failed to write analytics to AWS.', e)
  }
}
